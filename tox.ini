[tox]
envlist = 
    flake8
    pylint
    bandit
    py36
    py37
    py38
    py39
    py310
isolated_build = True
skip_missing_interpreters = true

[bandit]
exclude = .tox,build,dist,tests,.venv

[flake8]
exclude = .tox,build,dist,algorithms.egg-info,.venv,docs
max-line-length = 88

[isort]
profile = black
multi_line_output = 3
force_single_line = True

[pylint]
[MASTER]
disable=
    C0114, # missing-module-docstring
    C0115, # missing-class-docstring
    C0116, # missing-function-docstring
persistent = yes
suggestion-mode = yes
unsafe-load-any-extension = no
load-plugins = pylint_pytest,pylint_flask
[REPORTS]
output-format = parseable
score = yes
msg-template = {path}:{module}:{line}: [{msg_id}({symbol}), {obj}] {msg}
[REFACTORING]
max-nested-blocks = 5
never-returning-functions = sys.exit
[SIMILARITIES]
ignore-comments = yes
ignore-docstrings = yes
ignore-imports = yes
min-similarity-lines = 3
[TYPECHECK]
generated-members = db.session.*


[pytest]
filterwarnings =
    ignore::DeprecationWarning:graphene.*:
    ignore::DeprecationWarning:sqlalchemy.*:
    ignore::DeprecationWarning:marshmallow.*:
addopts =
    --color=yes
    --verbose

[testenv]
description = Unit tests
deps = -rrequirements.txt
commands = 
    coverage run --source=algorithms -m pytest --basetemp="{envtmpdir}" tests --junit-prefix="{envname}" --junitxml="target/{envname}-output.xml"
    coverage xml -o "target/{envname}-coverage.xml"

[testenv:bandit]
description = PyCQA security linter
deps = -rrequirements.txt
       bandit
commands = bandit -f custom -o target/bandit.out --msg-template "\{abspath\}:\{line\}: \{severity\}: \{test_id\}: \{msg}\" --ini tox.ini {posargs:-r algorithms}

[testenv:clean]
description = Clean up bytecode and build artifacts
deps = pyclean
commands = 
    pyclean {toxinidir}
    rm -rf .tox/ build/ dist/ algorithms.egg-info/ .pytest_cache/ pytestdebug.log target/output.xml target/coverage.xml
whitelist_externals =
    rm

[testenv:flake8]
description = Static code analysis and code style
deps = 
    -rrequirements.txt
    flake8
# commands = flake8 --format=pylint --output-file=target/flake8.txt --tee {posargs: algorithms}

[testenv:pylint]
description = Check for errors and code smells
deps = 
    -rrequirements.txt
    pylint
    pylint-flask
    pylint-pytest
commands = pylint --output=target/pylint.txt --rcfile tox.ini {posargs: algorithms tools examples} --exit-zero

[testenv:format]
description = Automatic formatting code
deps=
    -rrequirements.txt
commands = 
    autoflake -i -r --remove-all-unused-imports --remove-duplicate-keys --remove-unused-variables algorithms tests tools examples
    isort algorithms tests tools examples
    black algorithms tests tools examples

[testenv:docs]
description = Generate docs
basepython = python3.8
deps = 
    sphinx>=4.0.2
commands = 
    sphinx-build -d "target/docs_doctree" docs "target/docs/html" --color -W -bhtml {posargs}
    sphinx-build -d "target/docs_doctree" docs "target/docs/latex" --color -W -blatex {posargs}
